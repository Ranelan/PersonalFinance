<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/za/ac/cput/controller/RegularUserController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/za/ac/cput/controller/RegularUserController.java" />
              <option name="originalContent" value="package za.ac.cput.controller;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;import za.ac.cput.domain.RegularUser;&#10;import za.ac.cput.service.IRegularUserService;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@CrossOrigin(origins = &quot;http://localhost:3000&quot;)&#10;@RestController&#10;@RequestMapping(&quot;/api/regularUser&quot;)&#10;public class RegularUserController {&#10;&#10;    private final IRegularUserService regularUserService;&#10;&#10;    @Autowired&#10;    public RegularUserController(IRegularUserService regularUserService) {&#10;        this.regularUserService = regularUserService;&#10;    }&#10;&#10;    public static class LoginRequest {&#10;        public String usernameOrEmail;&#10;        public String password;&#10;    }&#10;&#10;    @PostMapping(&quot;/create&quot;)&#10;    public ResponseEntity&lt;RegularUser&gt; create(@RequestBody RegularUser regularUser) {&#10;        RegularUser createdUser = regularUserService.create(regularUser);&#10;        if (createdUser != null) {&#10;            return ResponseEntity.ok(createdUser);&#10;        } else {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;&#10;    @PostMapping(&quot;/login&quot;)&#10;    public ResponseEntity&lt;RegularUser&gt; logIn(@RequestBody RegularUserController.LoginRequest request) {&#10;        // Only support login by email for now&#10;        RegularUser regularUser = regularUserService.logIn(request.usernameOrEmail, request.password);&#10;        return (regularUser != null) ? ResponseEntity.ok(regularUser) : ResponseEntity.status(401).build();&#10;    }&#10;&#10;    @GetMapping(&quot;/read/{id}&quot;)&#10;    public ResponseEntity&lt;RegularUser&gt; read(@PathVariable Long id) {&#10;        RegularUser user = regularUserService.read(id);&#10;        if (user != null) {&#10;            return ResponseEntity.ok(user);&#10;        } else {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;    }&#10;&#10;    @PutMapping(&quot;/update&quot;)&#10;    public ResponseEntity&lt;RegularUser&gt; update(@RequestBody RegularUser regularUser) {&#10;        RegularUser updatedUser = regularUserService.update(regularUser);&#10;        if (updatedUser != null) {&#10;            return ResponseEntity.ok(updatedUser);&#10;        } else {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;&#10;    @DeleteMapping(&quot;/delete/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; delete(@PathVariable Long id) {&#10;        regularUserService.delete(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;    @GetMapping(&quot;/findByUserName/{userName}&quot;)&#10;    public ResponseEntity&lt;List&lt;RegularUser&gt;&gt; findByUserName(@PathVariable String userName) {&#10;        List&lt;RegularUser&gt; users = regularUserService.findByUserName(userName);&#10;        if (users != null &amp;&amp; !users.isEmpty()) {&#10;            return ResponseEntity.ok(users);&#10;        } else {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/findByEmail/{email}&quot;)&#10;    public ResponseEntity&lt;RegularUser&gt; findByEmail(@PathVariable String email) {&#10;        Optional&lt;RegularUser&gt; user = regularUserService.findByEmail(email);&#10;        return user.map(ResponseEntity::ok).orElseGet(() -&gt; ResponseEntity.notFound().build());&#10;    }&#10;&#10;    @GetMapping(&quot;/findAll&quot;)&#10;    public ResponseEntity&lt;List&lt;RegularUser&gt;&gt; findAll() {&#10;        List&lt;RegularUser&gt; users = regularUserService.findAll();&#10;        if (users != null &amp;&amp; !users.isEmpty()) {&#10;            return ResponseEntity.ok(users);&#10;        } else {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package za.ac.cput.controller;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;import za.ac.cput.domain.RegularUser;&#10;import za.ac.cput.service.IRegularUserService;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@CrossOrigin(origins = &quot;http://localhost:3000&quot;)&#10;@RestController&#10;@RequestMapping(&quot;/api/regularUser&quot;)&#10;public class RegularUserController {&#10;&#10;    private final IRegularUserService regularUserService;&#10;&#10;    @Autowired&#10;    public RegularUserController(IRegularUserService regularUserService) {&#10;        this.regularUserService = regularUserService;&#10;    }&#10;&#10;    public static class LoginRequest {&#10;        public String email;&#10;        public String password;&#10;    }&#10;&#10;    @PostMapping(&quot;/create&quot;)&#10;    public ResponseEntity&lt;RegularUser&gt; create(@RequestBody RegularUser regularUser) {&#10;        RegularUser createdUser = regularUserService.create(regularUser);&#10;        if (createdUser != null) {&#10;            return ResponseEntity.ok(createdUser);&#10;        } else {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;&#10;    @PostMapping(&quot;/login&quot;)&#10;    public ResponseEntity&lt;RegularUser&gt; logIn(@RequestBody RegularUserController.LoginRequest request) {&#10;        RegularUser regularUser = regularUserService.logIn(request.email, request.password);&#10;        return (regularUser != null) ? ResponseEntity.ok(regularUser) : ResponseEntity.status(401).build();&#10;    }&#10;&#10;    @GetMapping(&quot;/read/{id}&quot;)&#10;    public ResponseEntity&lt;RegularUser&gt; read(@PathVariable Long id) {&#10;        RegularUser user = regularUserService.read(id);&#10;        if (user != null) {&#10;            return ResponseEntity.ok(user);&#10;        } else {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;    }&#10;&#10;    @PutMapping(&quot;/update&quot;)&#10;    public ResponseEntity&lt;RegularUser&gt; update(@RequestBody RegularUser regularUser) {&#10;        RegularUser updatedUser = regularUserService.update(regularUser);&#10;        if (updatedUser != null) {&#10;            return ResponseEntity.ok(updatedUser);&#10;        } else {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;&#10;    @DeleteMapping(&quot;/delete/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; delete(@PathVariable Long id) {&#10;        regularUserService.delete(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;    @GetMapping(&quot;/findByUserName/{userName}&quot;)&#10;    public ResponseEntity&lt;List&lt;RegularUser&gt;&gt; findByUserName(@PathVariable String userName) {&#10;        List&lt;RegularUser&gt; users = regularUserService.findByUserName(userName);&#10;        if (users != null &amp;&amp; !users.isEmpty()) {&#10;            return ResponseEntity.ok(users);&#10;        } else {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/findByEmail/{email}&quot;)&#10;    public ResponseEntity&lt;RegularUser&gt; findByEmail(@PathVariable String email) {&#10;        Optional&lt;RegularUser&gt; user = regularUserService.findByEmail(email);&#10;        return user.map(ResponseEntity::ok).orElseGet(() -&gt; ResponseEntity.notFound().build());&#10;    }&#10;&#10;    @GetMapping(&quot;/findAll&quot;)&#10;    public ResponseEntity&lt;List&lt;RegularUser&gt;&gt; findAll() {&#10;        List&lt;RegularUser&gt; users = regularUserService.findAll();&#10;        if (users != null &amp;&amp; !users.isEmpty()) {&#10;            return ResponseEntity.ok(users);&#10;        } else {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>